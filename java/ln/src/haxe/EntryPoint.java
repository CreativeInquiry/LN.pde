// Generated by Haxe 4.1.3
package haxe;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class EntryPoint extends haxe.lang.HxObject
{
	static
	{
		//line 37 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
		haxe.EntryPoint.sleepLock = new haxe.java.vm.Lock();
		//line 38 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
		haxe.EntryPoint.mutex = new haxe.java.vm.Mutex();
		//line 40 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
		haxe.EntryPoint.pending = new haxe.root.Array<haxe.lang.Function>();
		//line 41 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
		haxe.EntryPoint.threadCount = 0;
	}
	
	public EntryPoint(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public EntryPoint()
	{
		//line 35 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
		haxe.EntryPoint.__hx_ctor_haxe_EntryPoint(this);
	}
	
	
	protected static void __hx_ctor_haxe_EntryPoint(haxe.EntryPoint __hx_this)
	{
	}
	
	
	public static haxe.java.vm.Lock sleepLock;
	
	public static haxe.java.vm.Mutex mutex;
	
	public static haxe.root.Array<haxe.lang.Function> pending;
	
	public static int threadCount;
	
	public static double processEvents()
	{
		//line 87 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
		while (true)
		{
			//line 89 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
			haxe.EntryPoint.mutex.acquire();
			//line 90 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
			haxe.lang.Function f = ((haxe.lang.Function) (haxe.EntryPoint.pending.shift()) );
			//line 91 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
			haxe.EntryPoint.mutex.release();
			//line 95 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
			if (( f == null )) 
			{
				//line 96 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
				break;
			}
			
			//line 97 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
			((haxe.lang.Function) (f) ).__hx_invoke0_o();
		}
		
		//line 99 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
		double time = haxe.MainLoop.tick();
		//line 100 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
		if ((  ! (haxe.MainLoop.hasEvents())  && ( haxe.EntryPoint.threadCount == 0 ) )) 
		{
			//line 101 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
			return ((double) (-1) );
		}
		
		//line 102 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
		return time;
	}
	
	
	public static void run()
	{
		//line 134 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
		while (true)
		{
			//line 135 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
			double nextTick = haxe.EntryPoint.processEvents();
			//line 136 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
			if (( nextTick < 0 )) 
			{
				//line 137 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
				break;
			}
			
			//line 138 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
			if (( nextTick > 0 )) 
			{
				//line 139 "/usr/local/lib/haxe/std/haxe/EntryPoint.hx"
				haxe.EntryPoint.sleepLock.wait(nextTick);
			}
			
		}
		
	}
	
	
}


